'''
https://leetcode.com/problems/longest-palindromic-substring/
'''
**** Approach 1 (DP) ****
class Solution:
    def longestPalindrome(self, s: str) -> str:
        if len(s)==1:
            return s
        ans=s[0];x=len(s)
        dp=[[0 for i in range(x)]for j in range(x)]
        for j in range(x):
            for i in range(j,-1,-1):
                if i==j:
                    dp[i][j]=1        
                elif j==i+1 and s[i]==s[i+1]:
                    dp[i][i+1]=1
                    if len(ans)<2:
                        ans=s[i:i+2]    
                elif s[i]==s[j] and dp[i+1][j-1]==1:
                    dp[i][j]=1
                    x=j-i+1
                    if x>len(ans):
                        ans=s[i:j+1]

        return ans

**** Approach 2 (Full Optimized)****
class Solution:
    def longestPalindrome(self, s: str) -> str:
        if len(s)==1:
            return s
        length=0;ans=''
        
        def solve(left,right):
            nonlocal length,ans
            while left>=0 and right<len(s) and s[left]==s[right]:
                if length<(right-left+1):
                    length=right-left+1
                    ans=s[left:right+1]
                left-=1
                right+=1
                
        
        for i in range(len(s)):
            solve(i,i)  ## Odd no of values
            solve(i,i+1)  ## even no of values
        return ans
